#!/usr/bin/env bash

set -eEuo pipefail

TMP_DIR="$(mktemp -d)"
ARCH="linux_amd64"
USER_INSTALL_PATH="$HOME/.bin/"
ROOT_INSTALL_PATH="/usr/bin"

main() {
	trap exit_clean_up EXIT
	setup_debug
	validate_first_argument "$@"
	TG_VERSION="$1"
	set_release_file_names
	define_error_messages
	cd "$TMP_DIR"
	download_tg_release_files
	filter_sha256sums_file
	confirm_checksums_match
	chmod 755 "$RELEASE_BINRARY"
	if [[ $(id -u) == 0 ]]; then
		install_as_root
	else
		install_as_normal_user
	fi
}

install_as_normal_user() {
	mkdir -p "$USER_INSTALL_PATH"
	chown "$(id -u)":"$(id -g)" "$RELEASE_BINRARY"
	mv -f "$RELEASE_BINRARY" "$USER_INSTALL_PATH/terragrunt"
	debug_message_to_stderr "installed Terragrunt to $USER_INSTALL_PATH."
	printf "Terragrunt %s succesfully installed in %s.\n" \
		"$TG_VERSION" \
		"$USER_INSTALL_PATH"
}

install_as_root() {
	chown 0:0 "$RELEASE_BINRARY"
	mv -f "$RELEASE_BINRARY" "$ROOT_INSTALL_PATH/terragrunt"
	debug_message_to_stderr "installed Terragrunt to $ROOT_INSTALL_PATH."
	printf "Terragrunt %s succesfully installed in %s.\n" \
		"$TG_VERSION" \
		"$ROOT_INSTALL_PATH"
}

confirm_checksums_match() {
	if ! sha256sum -c "SHA256SUMS_FILE_ARCH" 2>&1 | tee -a tgmanager_log | grep -q "$ARCH: OK"; then
		crit_error "$BAD_CHKSUM_MSG"
		exit 1
	fi
	debug_message_to_stderr "$GOOD_CHKSUM_MSG"
}

filter_sha256sums_file() {

	# The sha256sum will exit with status 2 if there are missing files.
	# Extract the right arch into SHA256SUMS_FILE_ARCH so it doesn't exit 2
	# when we don't want it to.

	local success_message

	if ! grep --color=never "$ARCH" "${SHA256SUMS_FILE}" >SHA256SUMS_FILE_ARCH 2>>tgmanager_log; then
		crit_error "failed to grep $SHA256SUMS_FILE"
		exit 1
	fi
	success_message=$(
		printf "succesfully extracted the arch. Contents: %s" "$(cat SHA256SUMS_FILE_ARCH)"
	)
	debug_message_to_stderr "$success_message"
}

download_tg_release_files() {

	# Download TG release binary and checksums

	attempt_download "$TG_RELEASES/$RELEASE_BINRARY"
	attempt_download "$TG_RELEASES/$SHA256SUMS_FILE"
}

attempt_download() {

	# Download $1, exit 1 printing an error message if the download fails

	if ! curl -LO --fail "$1" &>>tgmanager_log; then
		crit_error "failed to download $1"
		exit 1
	fi
	debug_message_to_stderr "downloaded $1 successfully"
}

debug_message_to_stderr() {

	# Send an DEBUG message to stderr if TFMANAGER_DEBUG=true
	# $1: the info message

	if [[ $TFMANAGER_DEBUG == true ]]; then
		printf "DEBUG: %s\n" "$1" >>/dev/stderr
	fi
}

crit_error() {

	# Send a CRITICAL message to stderr
	# If tgmanager_log exists, print the content to stderr
	# $1: the crit message

	printf "CRITICAL: %s\n" "$1" >>/dev/stderr
	if [[ -f tgmanager_log ]]; then
		cat <<-EOF >>/dev/stderr
			Contents of tgmanager_log file:

			$(cat tgmanager_log)
		EOF
	fi
}

exit_clean_up() {

	# Delete any temp files created

	rm -rf "$TMP_DIR"
	debug_message_to_stderr "removed script temp directory: $TMP_DIR."
}

setup_debug() {

	# Provide a default value for TFMANAGER_DEBUG. If the environment
	# variable TFMANAGER_DEBUG=true, debug messages are printed throughout
	# the rest of the script.

	if [[ -z ${TFMANAGER_DEBUG:-} ]]; then
		# Provide a default for the $TFMANAGER_DEBUG environment variable
		TFMANAGER_DEBUG=false
	else
		if [[ $TFMANAGER_DEBUG != true ]] && [[ $TFMANAGER_DEBUG != false ]]; then
			crit_error \
				"the environment variable \$TFMANAGER_DEBUG must be true or false."
			exit 1
		fi
	fi
}

validate_first_argument() {
	local error_message
	if [[ -z ${1:-} ]]; then
		error_message=$(
			printf "%s%s " \
				"the first argument must be the Terragrunt version" \
				" to install (e.g. tgmanager 0.37.4) or --help."
		)
		crit_error "$error_message"
		exit 1
	else
		if [[ ${1:-} == "--help" ]]; then
			cat <<-EOF >>/dev/stderr
				Usage: tgmanager [TERRAGRUNT_VERSION | --help]
			EOF
			exit 0
		elif ! echo "$1" | grep -qP '^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$'; then
			error_message=$(
				printf "%s%s%s" "the first argument failed " \
					"validation it must be a valid " \
					"Terragrunt version or --help."
			)
			crit_error "$error_message"
			exit 1
		fi
	fi
}

set_release_file_names() {
	TG_RELEASES="https://github.com/gruntwork-io/terragrunt/releases/download/v${TG_VERSION}"
	RELEASE_BINRARY="terragrunt_$ARCH"
	SHA256SUMS_FILE="SHA256SUMS"
}

define_error_messages() {
	GOOD_CHKSUM_MSG=$(
		printf "%s%s" "the sha256sum hash of the Terragrunt executable" \
			" matches the hash in $SHA256SUMS_FILE."
	)

	BAD_CHKSUM_MSG=$(
		printf "%s%s%s" "the sha256sum hash of the Terragrunt executable does " \
			"not match the hash in $SHA256SUMS_FILE. Possibile causes: an" \
			" on-going MITM attack, data corruption, or a bug in this script."
	)
}

main "$@"
